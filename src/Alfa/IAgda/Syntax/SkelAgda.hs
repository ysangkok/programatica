module SkelAgda where

-- Haskell module generated by the BNF converter

import AbsAgda
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transKind :: Kind -> Result
transKind x = case x of
  Kind str  -> failure x


transInfix :: Infix -> Result
transInfix x = case x of
  Infix str  -> failure x


transPIdent :: PIdent -> Result
transPIdent x = case x of
  PIdent str  -> failure x


transModule :: Module -> Result
transModule x = case x of
  Module decls  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  DDef defattrs def  -> failure x
  DImp import'  -> failure x


transDef :: Def -> Result
transDef x = case x of
  Value aident vardecls exp0 exp  -> failure x
  Binding aident exp  -> failure x
  Package aident typings packagebody  -> failure x
  Open exp openargs  -> failure x
  Data aident typings constructors  -> failure x
  Type aident typings exp  -> failure x
  Axiom aident typings exp  -> failure x
  Mutual defs  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EVar aident  -> failure x
  ECon aident  -> failure x
  ESet  -> failure x
  EType  -> failure x
  EKind kind  -> failure x
  EMeta  -> failure x
  EString str  -> failure x
  EChar c  -> failure x
  EInt n  -> failure x
  EDouble d  -> failure x
  EProj exp aident  -> failure x
  EApp exp0 exp  -> failure x
  EInfix exp0 infix' exp  -> failure x
  ESig fielddecls  -> failure x
  EStr bindings  -> failure x
  ESum constructors  -> failure x
  EIndSum iconstructors  -> failure x
  EPi vardecl exp  -> failure x
  EFun exp0 exp  -> failure x
  EAbs vardecl exp  -> failure x
  ELet decls exp  -> failure x
  ECase exp branchs  -> failure x
  EOpen exp0 openargs exp  -> failure x
  EConst aident  -> failure x
  EMetaN n  -> failure x


transTyping :: Typing -> Result
transTyping x = case x of
  TDecl vardecl  -> failure x
  TExp exp  -> failure x


transVarDecl :: VarDecl -> Result
transVarDecl x = case x of
  VDecl bidents exp  -> failure x


transFieldDecl :: FieldDecl -> Result
transFieldDecl x = case x of
  FDecl aident exp  -> failure x


transBranch :: Branch -> Result
transBranch x = case x of
  BranchCon aident aidents exp  -> failure x
  BranchInf aident0 infix' aident exp  -> failure x
  BranchVar aident exp  -> failure x


transConstructor :: Constructor -> Result
transConstructor x = case x of
  Cnstr aident typings  -> failure x


transIConstructor :: IConstructor -> Result
transIConstructor x = case x of
  ICnstr aident typings exps  -> failure x


transBinding :: Binding -> Result
transBinding x = case x of
  Bind aident exp  -> failure x


transPackageBody :: PackageBody -> Result
transPackageBody x = case x of
  PackageDef decls  -> failure x
  PackageInst exp  -> failure x


transOpenArg :: OpenArg -> Result
transOpenArg x = case x of
  OpenArgSimple defattrs aident  -> failure x
  OpenArgTyped defattrs aident exp  -> failure x
  OpenArgAs defattrs aident0 aident  -> failure x
  OpenArgFull defattrs aident0 exp aident  -> failure x


transDefAttr :: DefAttr -> Result
transDefAttr x = case x of
  Private  -> failure x
  Public  -> failure x
  Abstract  -> failure x
  Concrete  -> failure x


transImport :: Import -> Result
transImport x = case x of
  Import str  -> failure x


transAIdent :: AIdent -> Result
transAIdent x = case x of
  I infix'  -> failure x
  F pident  -> failure x


transBIdent :: BIdent -> Result
transBIdent x = case x of
  C aident  -> failure x



